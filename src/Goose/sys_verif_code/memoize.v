(* autogenerated from sys_verif_code/memoize *)
From Perennial.goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.

Definition Memoize := struct.decl [
  "f" :: (uint64T -> uint64T)%ht;
  "results" :: mapT uint64T
].

Definition NewMemoize: val :=
  rec: "NewMemoize" "f" :=
    struct.mk Memoize [
      "f" ::= "f";
      "results" ::= NewMap uint64T uint64T #()
    ].

Definition Memoize__Call: val :=
  rec: "Memoize__Call" "m" "x" :=
    let: ("cached", "ok") := MapGet (struct.get Memoize "results" "m") "x" in
    (if: "ok"
    then "cached"
    else
      let: "y" := (struct.get Memoize "f" "m") "x" in
      MapInsert (struct.get Memoize "results" "m") "x" "y";;
      "y").

(* MockMemoize has the same API as Memoize but with an implementation that
   doesn't actually save any results. *)
Definition MockMemoize := struct.decl [
  "f" :: (uint64T -> uint64T)%ht
].

Definition NewMockMemoize: val :=
  rec: "NewMockMemoize" "f" :=
    struct.new MockMemoize [
      "f" ::= "f"
    ].

Definition MockMemoize__Call: val :=
  rec: "MockMemoize__Call" "m" "x" :=
    (struct.loadF MockMemoize "f" "m") "x".

End code.
